### Delayed Vaccine Catch-Up Calculator

Based on your description, I've built a simple Python script that acts as a "delayed vaccine figure outer" tool for doctors. It uses the CDC catch-up immunization schedule rules (from the 2025 guidelines) to determine what vaccines a child or adolescent needs next, based on their current age, vaccine history, and the minimum ages/intervals/exceptions for each vaccine.

The script:
- Takes the child's birth date and current date to calculate age.
- Asks for the dates of previous doses for each vaccine (you can enter multiple dates separated by commas, or leave blank if none).
- Outputs a list of vaccines that can be given now (if eligible today), or the earliest date they can be given, or notes if the series is complete or if they've aged out.
- Handles no restarting of series (per CDC guidance) and focuses on minimum intervals and age limits.
- Covers all vaccines from the standard and catch-up schedules (e.g., HepB, Rotavirus, DTaP, Hib, PCV, IPV, COVID-19, Influenza, MMR, VAR, HepA, Tdap, HPV, MenACWY, MenB, RSV, Dengue, Mpox). For vaccines with special considerations (e.g., risk groups or brands), it includes basic notes, but consult CDC notes for complex cases like immunocompromised patients or specific brands.
- Uses approximate days for months (30 days/month) for simplicity, but uses exact timedelta for intervals.

This is a console-based tool you can run in Python (no extra libraries needed beyond standard datetime). It's not a full GUI app, but it's practical for quick calculations during consultations. You can copy-paste it into a file (e.g., vaccine_calculator.py) and run it with `python vaccine_calculator.py`. To customize, you can add more special rules or integrate it into a spreadsheet/app.

If you provide example patient data (e.g., birth date, current date, vaccine history), I can run a simulation here.

```python
from datetime import datetime, timedelta

def parse_date(s):
    try:
        return datetime.strptime(s, '%Y-%m-%d')
    except ValueError:
        raise ValueError("Date format must be YYYY-MM-DD")

def get_age_in_days(birth_date, current_date):
    return (current_date - birth_date).days

def get_recommendation(vaccine_name, birth_date, current_date, doses_dates):
    doses_dates = sorted(doses_dates)
    num_doses = len(doses_dates)
    current_age_days = get_age_in_days(birth_date, current_date)
    recommendation = None

    if vaccine_name == 'HepB':
        total_doses = 3
        min_age_dose1 = 0
        min_intervals = [28, 56]  # days: 4 weeks, 8 weeks
        min_final_age = 168  # 24 weeks
        if num_doses >= total_doses:
            recommendation = 'Series complete'
        elif num_doses == 0:
            if current_age_days >= min_age_dose1:
                recommendation = 'Give dose 1 now'
            else:
                recommendation = 'Wait until birth'
        elif num_doses == 1:
            next_date = doses_dates[0] + timedelta(days=min_intervals[0])
            if current_date >= next_date:
                recommendation = 'Give dose 2 now'
            else:
                recommendation = f'Give dose 2 on or after {next_date.strftime("%Y-%m-%d")}'
        elif num_doses == 2:
            next_date = max(doses_dates[1] + timedelta(days=min_intervals[1]), doses_dates[0] + timedelta(days=112), birth_date + timedelta(days=min_final_age))
            if current_date >= next_date:
                recommendation = 'Give dose 3 now'
            else:
                recommendation = f'Give dose 3 on or after {next_date.strftime("%Y-%m-%d")}'

    elif vaccine_name == 'Rotavirus':
        total_doses = 3  # Assume max for RV5; adjust for RV1 (2 doses) if known
        min_age_dose1 = 42  # 6 weeks
        min_intervals = [28, 28]
        max_age_first = 105  # 14 weeks + 6 days ≈ 105 days
        max_age_final = 240  # 8 months ≈ 240 days
        if current_age_days > max_age_final:
            recommendation = 'Past max age for series; no more doses needed'
        elif num_doses >= total_doses:
            recommendation = 'Series complete'
        elif num_doses == 0:
            if current_age_days > max_age_first:
                recommendation = 'Past max age for first dose; no series needed'
            elif current_age_days >= min_age_dose1:
                recommendation = 'Give dose 1 now'
            else:
                recommendation = f'Give dose 1 on or after {(birth_date + timedelta(days=min_age_dose1)).strftime("%Y-%m-%d")}'
        else:
            next_date = doses_dates[-1] + timedelta(days=min_intervals[num_doses - 1])
            if current_date >= next_date and current_age_days <= max_age_final:
                recommendation = f'Give dose {num_doses + 1} now'
            elif current_age_days > max_age_final:
                recommendation = 'Past max age for final dose; series incomplete but no more doses'
            else:
                recommendation = f'Give dose {num_doses + 1} on or after {next_date.strftime("%Y-%m-%d")}'

    elif vaccine_name == 'DTaP':
        total_doses = 5
        min_age_dose1 = 42  # 6 weeks
        min_intervals = [28, 28, 183, 183]  # 4w, 4w, 6m, 6m
        min_age_dose4 = 365 * 4  # 4 years for no 5th if conditions met
        if num_doses >= total_doses:
            recommendation = 'Series complete'
        elif num_doses == 4:
            if (doses_dates[3] - birth_date).days >= min_age_dose4 and (doses_dates[3] - doses_dates[2]).days >= 183:
                recommendation = 'Series complete (no 5th dose needed)'
            else:
                next_date = doses_dates[3] + timedelta(days=min_intervals[3])
                if current_date >= next_date:
                    recommendation = 'Give dose 5 now'
                else:
                    recommendation = f'Give dose 5 on or after {next_date.strftime("%Y-%m-%d")}'
        else:
            if num_doses == 0:
                next_date = birth_date + timedelta(days=min_age_dose1)
            else:
                next_date = doses_dates[-1] + timedelta(days=min_intervals[num_doses - 1])
            if current_date >= next_date:
                recommendation = f'Give dose {num_doses + 1} now'
            else:
                recommendation = f'Give dose {num_doses + 1} on or after {next_date.strftime("%Y-%m-%d")}'

    # Add similar blocks for other vaccines based on CDC rules
    # Hib: Complex; uses age at first dose for reduced doses
    elif vaccine_name == 'Hib':
        min_age_dose1 = 42
        if num_doses >= 4 or (num_doses >= 1 and current_age_days >= 450):  # 15 months for single dose if started late
            recommendation = 'Series complete'
        elif num_doses == 0:
            if current_age_days >= min_age_dose1:
                recommendation = 'Give dose 1 now'
            else:
                recommendation = f'Give dose 1 on or after {(birth_date + timedelta(days=min_age_dose1)).strftime("%Y-%m-%d")}'
        else:
            # Simplified; for full, use CDC job aid flowchart for brand/age
            interval = 28 if (doses_dates[0] - birth_date).days < 365 else 56
            next_date = doses_dates[-1] + timedelta(days=interval)
            if current_date >= next_date:
                recommendation = f'Give next dose now (consult brand for total doses)'
            else:
                recommendation = f'Give next dose on or after {next_date.strftime("%Y-%m-%d")} (consult brand for total doses)'

    # PCV20 (Pneumococcal Conjugate)
    elif vaccine_name == 'PCV20':
        min_age_dose1 = 42
        if num_doses >= 4 or (num_doses >= 1 and current_age_days >= 730):  # 24 months for single dose if started late
            recommendation = 'Series complete'
        elif num_doses == 0:
            if current_age_days >= min_age_dose1:
                recommendation = 'Give dose 1 now'
            else:
                recommendation = f'Give dose 1 on or after {(birth_date + timedelta(days=min_age_dose1)).strftime("%Y-%m-%d")}'
        else:
            interval = 28 if num_doses < 3 and current_age_days < 365 else 56
            next_date = doses_dates[-1] + timedelta(days=interval)
            if current_date >= next_date:
                recommendation = 'Give next dose now'
            else:
                recommendation = f'Give next dose on or after {next_date.strftime("%Y-%m-%d")}'

    # IPV
    elif vaccine_name == 'IPV':
        total_doses = 4
        min_age_dose1 = 42
        min_intervals = [28, 28, 183]  # 4w, 4w, 6m for dose3 to4 if >4yrs
        if num_doses >= total_doses:
            recommendation = 'Series complete'
        elif num_doses == 0:
            recommendation = 'Give dose 1 now' if current_age_days >= min_age_dose1 else f'Give dose 1 on or after {(birth_date + timedelta(days=min_age_dose1)).strftime("%Y-%m-%d")}'
        else:
            interval = min_intervals[num_doses - 1] if num_doses < 3 else 183 if current_age_days >= 1460 else 28  # 4 years for longer interval
            next_date = doses_dates[-1] + timedelta(days=interval)
            recommendation = 'Give next dose now' if current_date >= next_date else f'Give next dose on or after {next_date.strftime("%Y-%m-%d")}'

    # COVID-19
    elif vaccine_name == 'COVID-19':
        # 2024-2025 formula; 1 or more doses depending on age/history
        if current_age_days < 183:  # <6 months
            recommendation = 'Not recommended under 6 months'
        elif num_doses >= 1:  # Simplified for catch-up; see notes for immunocompromised
            recommendation = 'Series complete; annual update if eligible'
        else:
            recommendation = 'Give 1 or more doses of 2024-2025 vaccine now (see notes for exact number)'

    # Influenza
    elif vaccine_name == 'Influenza':
        # Annual; check if given this season
        recommendation = 'Give 1 dose annually if not given this season (or 2 if <9yrs and first time)'

    # MMR
    elif vaccine_name == 'MMR':
        total_doses = 2
        min_age_dose1 = 365  # 12 months
        min_intervals = [28]
        if num_doses >= total_doses:
            recommendation = 'Series complete'
        elif num_doses == 0:
            recommendation = 'Give dose 1 now' if current_age_days >= min_age_dose1 else f'Give dose 1 on or after {(birth_date + timedelta(days=min_age_dose1)).strftime("%Y-%m-%d")}'
        else:
            next_date = doses_dates[-1] + timedelta(days=min_intervals[0])
            recommendation = 'Give dose 2 now' if current_date >= next_date else f'Give dose 2 on or after {next_date.strftime("%Y-%m-%d")}'

    # VAR
    elif vaccine_name == 'VAR':
        total_doses = 2
        min_age_dose1 = 365
        min_intervals = [84]  # 12 weeks for <13yrs, 4 weeks for >13
        interval = 28 if current_age_days >= 4745 else 84  # 13 yrs ≈ 4745 days
        if num_doses >= total_doses:
            recommendation = 'Series complete'
        elif num_doses == 0:
            recommendation = 'Give dose 1 now' if current_age_days >= min_age_dose1 else f'Give dose 1 on or after {(birth_date + timedelta(days=min_age_dose1)).strftime("%Y-%m-%d")}'
        else:
            next_date = doses_dates[-1] + timedelta(days=interval)
            recommendation = 'Give dose 2 now' if current_date >= next_date else f'Give dose 2 on or after {next_date.strftime("%Y-%m-%d")}'

    # HepA
    elif vaccine_name == 'HepA':
        total_doses = 2
        min_age_dose1 = 365
        min_intervals = [183]  # 6 months
        if num_doses >= total_doses:
            recommendation = 'Series complete'
        elif num_doses == 0:
            recommendation = 'Give dose 1 now' if current_age_days >= min_age_dose1 else f'Give dose 1 on or after {(birth_date + timedelta(days=min_age_dose1)).strftime("%Y-%m-%d")}'
        else:
            next_date = doses_dates[-1] + timedelta(days=min_intervals[0])
            recommendation = 'Give dose 2 now' if current_date >= next_date else f'Give dose 2 on or after {next_date.strftime("%Y-%m-%d")}'

    # Tdap (for >7 yrs)
    elif vaccine_name == 'Tdap':
        min_age_dose1 = 2555  # 7 yrs
        if current_age_days < min_age_dose1:
            recommendation = 'Use DTaP instead'
        elif num_doses >= 1:
            recommendation = 'Series complete (one lifetime dose for catch-up)'
        else:
            recommendation = 'Give 1 dose now'

    # HPV
    elif vaccine_name == 'HPV':
        min_age_dose1 = 3285  # 9 yrs
        total_doses = 3 if current_age_days > 5475 else 2  # 3 doses if started at 15+ yrs
        min_intervals = [28, 152]  # 4w, 5m for 3-dose
        if current_age_days > 9855:  # >27 yrs, not routinely recommended
            recommendation = 'Not routinely recommended after 26 yrs; discuss shared decision'
        elif num_doses >= total_doses:
            recommendation = 'Series complete'
        elif num_doses == 0:
            recommendation = 'Give dose 1 now' if current_age_days >= min_age_dose1 else f'Give dose 1 on or after {(birth_date + timedelta(days=min_age_dose1)).strftime("%Y-%m-%d")}'
        else:
            next_date = doses_dates[-1] + timedelta(days=min_intervals[num_doses - 1])
            recommendation = f'Give dose {num_doses + 1} now' if current_date >= next_date else f'Give dose {num_doses + 1} on or after {next_date.strftime("%Y-%m-%d")}'

    # MenACWY
    elif vaccine_name == 'MenACWY':
        min_age_dose1 = 60  # 2 months for CRM, 730 for TT
        total_doses = 2
        min_intervals = [1825]  # 5 yrs for second
        if num_doses >= total_doses:
            recommendation = 'Series complete; boosters if high-risk'
        elif num_doses == 0:
            recommendation = 'Give dose 1 now (preferred at 11-12 yrs)'
        else:
            next_date = doses_dates[-1] + timedelta(days=min_intervals[0])
            recommendation = 'Give dose 2 now' if current_date >= next_date else f'Give dose 2 on or after {next_date.strftime("%Y-%m-%d")} (preferred at 16 yrs)'

    # MenB
    elif vaccine_name == 'MenB':
        min_age_dose1 = 3650  # 10 yrs
        total_doses = 2  # or 3 for some brands
        min_intervals = [183]  # 6 months
        if current_age_days < min_age_dose1:
            recommendation = 'Not recommended under 10 yrs unless high-risk'
        elif num_doses >= total_doses:
            recommendation = 'Series complete'
        else:
            if num_doses == 0:
                recommendation = 'Give dose 1 now (preferred at 16-18 yrs)'
            else:
                next_date = doses_dates[-1] + timedelta(days=min_intervals[0])
                recommendation = 'Give dose 2 now' if current_date >= next_date else f'Give dose 2 on or after {next_date.strftime("%Y-%m-%d")}'

    # RSV (Abrysvo for pregnancy, Nirsevimab for infants)
    elif vaccine_name == 'RSV':
        if current_age_days < 240:  # <8 months
            if num_doses >= 1:
                recommendation = 'Series complete'
            else:
                recommendation = 'Give 1 dose now if born during or entering RSV season'
        else:
            recommendation = 'Not recommended for older children unless high-risk'

    # Dengue
    elif vaccine_name == 'Dengue':
        min_age_dose1 = 3285  # 9 yrs
        max_age_dose1 = 5840  # 16 yrs
        total_doses = 3
        min_intervals = [183, 183]  # 6m, 6m
        if current_age_days < min_age_dose1 or current_age_days > max_age_dose1:
            recommendation = 'Only for 9-16 yrs in endemic areas with prior infection evidence'
        elif num_doses >= total_doses:
            recommendation = 'Series complete'
        else:
            if num_doses == 0:
                recommendation = 'Give dose 1 now if eligible'
            else:
                next_date = doses_dates[-1] + timedelta(days=min_intervals[num_doses - 1])
                recommendation = f'Give dose {num_doses + 1} now' if current_date >= next_date else f'Give dose {num_doses + 1} on or after {next_date.strftime("%Y-%m-%d")}'

    # Mpox
    elif vaccine_name == 'Mpox':
        recommendation = 'Not routinely recommended for children; only for high-risk exposure (consult CDC)'

    if recommendation is None:
        recommendation = 'No specific recommendation; consult CDC notes'

    return recommendation

# Main script
if __name__ == '__main__':
    print("Delayed Vaccine Catch-Up Calculator (based on 2025 CDC guidelines)")
    birth_str = input("Enter child's birth date (YYYY-MM-DD): ")
    birth_date = parse_date(birth_str)
    current_str = input("Enter current date (YYYY-MM-DD): ")
    current_date = parse_date(current_str)
    history = {}
    vaccines = ['HepB', 'Rotavirus', 'DTaP', 'Hib', 'PCV20', 'IPV', 'COVID-19', 'Influenza', 'MMR', 'VAR', 'HepA', 'Tdap', 'HPV', 'MenACWY', 'MenB', 'RSV', 'Dengue', 'Mpox']
    for v in vaccines:
        dates_str = input(f"Enter dates of previous doses for {v} (comma-separated YYYY-MM-DD, or blank if none): ")
        if dates_str.strip():
            history[v] = [parse_date(d.strip()) for d in dates_str.split(',')]
        else:
            history[v] = []

    print("\nRecommendations:")
    for v in vaccines:
        rec = get_recommendation(v, birth_date, current_date, history[v])
        print(f"{v}: {rec}")
```

### How to Use
1. Run the script in a Python environment.
2. Enter the birth and current dates.
3. For each vaccine, enter previous dose dates (e.g., "2020-01-05,2020-03-10" or leave blank).
4. It outputs recommendations like "Give dose 2 now" or "Past max age".
5. Notes: This is a simplification; for brand-specific (e.g., Hib Pedvax vs ActHib), high-risk conditions, or annual vaccines like Influenza/COVID, always cross-check the full CDC notes or job aids at https://www.cdc.gov/vaccines/hcp/imz-schedules/child-adolescent-catch-up.html. If you need expansions (e.g., GUI or more rules), let me know! 

This should save time compared to manual chart lookups. For the full standard schedule, refer to the image you provided or CDC site.
<argument name="citation_id">0</argument>

<argument name="citation_id">1</argument>

<argument name="citation_id">2</argument>

<argument name="citation_id">12</argument>
